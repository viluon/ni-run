let n_bases = 7;
let bases = begin
  let i = 0;
  let base = 1;
  array(n_bases, begin
    let b = base * (if i % 2 == 0 then 1 else begin base <- base * 10; 5 end);
    i <- i + 1; b
  end)
end;

function write_roman_digit(b) ->
  if      b == 0 then print("I")
  else if b == 1 then print("V")
  else if b == 2 then print("X")
  else if b == 3 then print("L")
  else if b == 4 then print("C")
  else if b == 5 then print("D")
  else if b == 6 then print("M");

function awaken(n) -> object extends n begin
  let n = n;
  function print_decimal() -> print("~\n", this.n);
  function print_roman() -> begin
    let n = this.n;

    let b = n_bases - 1;
    while b >= 0 & n > 0 do begin
      let base = bases[b];

      // find the number to subtract from the current "base"
      // (I in IV, C in CD, X in XL(II), etc.), I call it
      // the predecessor (pred)

      let break = false;
      let b_pred = 0;
      while b > 0 & n < base & false == break & b_pred < b do begin
        let pred = bases[b_pred];
        if base != 2 * pred & n >= base - pred then begin
          n <- n - base + pred;
          write_roman_digit(b_pred);
          write_roman_digit(b);
          break <- true;
        end;
        b_pred <- b_pred + 1;
      end;
      if false == break then
        while n >= base do begin
          n <- n - base;
          write_roman_digit(b);
        end;

      b <- b - 1;
    end;
    print("\n");
  end;
end;

let numbers = array(let len = 17, null);
numbers[0]  <- 1;
numbers[1]  <- 4;
numbers[2]  <- 5;
numbers[3]  <- 9;
numbers[4]  <- 10;
numbers[5]  <- 40;
numbers[6]  <- 50;
numbers[7]  <- 90;
numbers[8]  <- 100;
numbers[9]  <- 400;
numbers[10] <- 500;
numbers[11] <- 900;
numbers[12] <- 1000;
numbers[13] <- 6;
numbers[14] <- 42;
numbers[15] <- 666;
numbers[16] <- 14000;

let i = 0;
while i < len do begin
  let woke_number = awaken(numbers[i]);
  print("~\t", numbers[i]);
  woke_number.print_roman();
  i <- i + 1;
end
